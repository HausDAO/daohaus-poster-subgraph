// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Content extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Content entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Content entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Content", id.toString(), this);
  }

  static load(id: string): Content | null {
    return store.get("Content", id) as Content | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): string {
    let value = this.get("createdAt");
    return value.toString();
  }

  set createdAt(value: string) {
    this.set("createdAt", Value.fromString(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get molochAddress(): string | null {
    let value = this.get("molochAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set molochAddress(value: string | null) {
    if (value === null) {
      this.unset("molochAddress");
    } else {
      this.set("molochAddress", Value.fromString(value as string));
    }
  }

  get memberAddress(): Bytes {
    let value = this.get("memberAddress");
    return value.toBytes();
  }

  set memberAddress(value: Bytes) {
    this.set("memberAddress", Value.fromBytes(value));
  }

  get contentType(): string {
    let value = this.get("contentType");
    return value.toString();
  }

  set contentType(value: string) {
    this.set("contentType", Value.fromString(value));
  }

  get location(): string {
    let value = this.get("location");
    return value.toString();
  }

  set location(value: string) {
    this.set("location", Value.fromString(value));
  }

  get rawData(): string {
    let value = this.get("rawData");
    return value.toString();
  }

  set rawData(value: string) {
    this.set("rawData", Value.fromString(value));
  }
}
